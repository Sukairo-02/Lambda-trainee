service: image-storage
frameworkVersion: '3'

provider:
    name: aws
    runtime: nodejs14.x
    region: eu-north-1
    environment:
        userPoolId: !Ref UserPool
        clientId: !Ref UserClient
        bucketName: !Ref S3Bucket
    iamRoleStatements:
        - Effect: Allow
          Action:
              - cognito-idp:AdminInitiateAuth
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminSetUserPassword
          Resource: '*'

        - Effect: Allow
          Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - lambda:InvokeFunction
          Resource: !Join ['/', [!GetAtt S3Bucket.Arn, '*']]

functions:
    userSignup:
        handler: src/index.userSignup
        events:
            - http:
                  path: /user/
                  method: post

    userRefresh:
        handler: src/index.userRefresh
        events:
            - http:
                  path: /user/
                  method: patch

    userRegister:
        handler: src/index.userRegister
        events:
            - http:
                  path: /user/register
                  method: post

    getImages:
        handler: src/index.getImages
        events:
            - http:
                  path: /images
                  method: get
                  authorizer:
                      name: PrivateAuthorizerImages
                      type: COGNITO_USER_POOLS
                      arn:
                          Fn::GetAtt:
                              - UserPool
                              - Arn
                      claims:
                          - email

    postImages:
        handler: src/index.postImages
        events:
            - http:
                  path: /images
                  method: post
                  authorizer:
                      name: PrivateAuthorizerImages
                      type: COGNITO_USER_POOLS
                      arn:
                          Fn::GetAtt:
                              - UserPool
                              - Arn
                      claims:
                          - email

    deleteImages:
        handler: src/index.deleteImages
        events:
            - http:
                  path: /images
                  method: delete
                  authorizer:
                      name: PrivateAuthorizerImages
                      type: COGNITO_USER_POOLS
                      arn:
                          Fn::GetAtt:
                              - UserPool
                              - Arn
                      claims:
                          - email

resources:
    Resources:
        UserPool:
            Type: AWS::Cognito::UserPool
            Properties:
                UserPoolName: image-api-auth-pool
                Schema:
                    - Name: email
                      Required: true
                      Mutable: true
                Policies:
                    PasswordPolicy:
                        MinimumLength: 6
                AutoVerifiedAttributes: ['email']

        UserClient:
            Type: AWS::Cognito::UserPoolClient
            Properties:
                ClientName: image-api-user-pool-ui
                GenerateSecret: false
                UserPoolId: { Ref: UserPool }
                AccessTokenValidity: 5
                IdTokenValidity: 5
                ExplicitAuthFlows:
                    - 'ADMIN_NO_SRP_AUTH'

        S3Bucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: lambda-comp-rekass-image-api-bucket
                PublicAccessBlockConfiguration:
                    BlockPublicAcls: true
                    BlockPublicPolicy: true
                    IgnorePublicAcls: true
                    RestrictPublicBuckets: true

plugins:
    - serverless-webpack
